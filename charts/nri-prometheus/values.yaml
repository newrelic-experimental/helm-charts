# IMPORTANT: Specify your New Relic API key here.
# licenseKey:
#
# or Specify secret which contains New Relic API key
# customSecretName: secret_name
# customSecretLicenseKey: secret_key
#
# IMPORTANT: The Kubernetes cluster name
# https://docs.newrelic.com/docs/kubernetes-monitoring-integration
# cluster: ""
#
# The previous values can also be declared as global in order to be
# shared by other newrelic charts
#
# global:
#   licenseKey:
#   customSecretName: secret_name
#   customSecretLicenseKey: secret_key
#   cluster: ""

prometheusScrape: "true"

nameOverride: ""

fullnameOverride: ""

image:
  repository: newrelic/nri-prometheus
  tag: 2.3.0
  ## It is possible to specify docker registry credentials
  ## See https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  # pullSecrets:
    # - name: regsecret

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

rbac:
  # Specifies whether RBAC resources should be created
  create: true

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the name template
  name: ""
  # Specify any annotations to add to the ServiceAccount
  annotations:

# If you wish to provide your own config.yaml file include it under config:
# the sample config file is included here as an example.
config:
  # How often the integration should run. Defaults to 30s.
  # scrape_duration: "30s"
  # The HTTP client timeout when fetching data from endpoints. Defaults to 30s.
  # scrape_timeout: "30s"
  # Wether the integration should run in verbose mode or not. Defaults to false.
  # verbose: true
  # Wether the integration should skip TLS verification or not. Defaults to false.
  # insecure_skip_verify: false
  # The label used to identify scrapable targets. Defaults to "prometheus.io/scrape".
  # scrape_enabled_label: "prometheus.io/scrape"
  # Wether k8s nodes needs to be labelled to be scraped or not. Defaults to false.
  # require_scrape_enabled_label_for_nodes: true
  # Wether the integraton sends metrics directly to New Relic (true) or to the Infrastructure agent (false)
  # standalone: false
  # Number of worker threads used for scraping targets. Defaults to 4
  # worker_threads: 4

  # transformations:
  #   - description: "General processing rules"
  #     rename_attributes:
  #       - metric_prefix: ""
  #         attributes:
  #           container_name: "containerName"
  #           pod_name: "podName"
  #           namespace: "namespaceName"
  #           node: "nodeName"
  #           container: "containerName"
  #           pod: "podName"
  #           deployment: "deploymentName"
  #     ignore_metrics:
  #       # Ignore all the metrics except the ones listed below.
  #       # This is a list that complements the data retrieved by the New
  #       # Relic Kubernetes Integration, that's why Pods and containers are
  #       # not included, because they are already collected by the
  #       # Kubernetes Integration.
  #       - except:
  #         - kube_hpa_
  #         - kube_daemonset_ #### K8s Daemonset
  #         - kube_statefulset_ #### K8s Daemonset
  #         - kube_endpoint_ #### K8s Daemonset
  #         - kube_service_ #### K8s Daemonset
  #         - kube_limitrange
  #         - kube_node_ #K8s Daemonset
  #         - kube_poddisruptionbudget_
  #         - kube_resourcequota
  #         - nr_stats
  #     copy_attributes:
  #       # Copy all the labels from the timeseries with metric name
  #       # `kube_hpa_labels` into every timeseries with a metric name that
  #       # starts with `kube_hpa_` only if they share the same `namespace`
  #       # and `hpa` labels.
  #       - from_metric: "kube_hpa_labels"
  #         to_metrics: "kube_hpa_"
  #         match_by:
  #           - namespace
  #           - hpa
  #       - from_metric: "kube_daemonset_labels"
  #         to_metrics: "kube_daemonset_"
  #         match_by:
  #           - namespace
  #           - daemonset
  #       - from_metric: "kube_statefulset_labels"
  #         to_metrics: "kube_statefulset_"
  #         match_by:
  #           - namespace
  #           - statefulset
  #       - from_metric: "kube_endpoint_labels"
  #         to_metrics: "kube_endpoint_"
  #         match_by:
  #           - namespace
  #           - endpoint
  #       - from_metric: "kube_service_labels"
  #         to_metrics: "kube_service_"
  #         match_by:
  #           - namespace
  #           - service
  #       - from_metric: "kube_node_labels"
  #         to_metrics: "kube_node_"
  #         match_by:
  #           - namespace
  #           - node
  # integration definition files required to map metrics to entities
  # definition_files_path: /etc/newrelic-infra/definition-files

# If you wish to provide additional annotations to apply to the pod(s), specify
# them here
# podAnnotations:

# Pod scheduling priority
# Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
# priorityClassName: high-priority

nodeSelector: {}

tolerations: []

affinity: {}

# Sends data to staging, can be set as a global.
# global.nrStaging
nrStaging: false
